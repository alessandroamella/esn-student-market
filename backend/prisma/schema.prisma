generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ESN
  ADMIN
  OWNER
}

model User {
  id        Int      @id @default(autoincrement())
  username  String?  @unique
  picture   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth relations - each can be null, user must have at least one
  localAuth    LocalAuth?
  telegramAuth TelegramAuth?
  googleAuth   GoogleAuth?
  githubAuth   GithubAuth?

  // App relations
  products Product[]
}

// For username/password authentication
model LocalAuth {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  hashedPwd   String
  verified    Boolean @default(false)
  verifyToken String? // JWT token with email, expiration attached

  // Recovery/reset related
  resetToken String? // Also JWT token

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TelegramAuth {
  id         Int    @id @default(autoincrement())
  telegramId String @unique

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GoogleAuth {
  id       Int    @id @default(autoincrement())
  googleId String @unique

  // OAuth specific
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  expiresAt    Int?

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GithubAuth {
  id       Int    @id @default(autoincrement())
  githubId String @unique

  // OAuth specific
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  expiresAt    Int?

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  images            String[]
  userId            Int
  categoryId        Int
  validUntil        DateTime
  sold              Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  onlyForRegistered Boolean  @default(false)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
}

enum Constraints {
  EMAIL_ENDS_WITH
}

model UserRegistrationConstraint {
  constraint     Constraints
  field          String
  acceptedValues String[]

  @@id([constraint, field])
}
