generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ESN
  ADMIN
  OWNER
}

model User {
  id        Int      @id @default(autoincrement())
  username  String?  @unique
  email     String?  @unique
  picture   String?
  role      Role     @default(USER)
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth relations - each can be null, user must have at least one
  emailAuth    EmailAuth?
  telegramAuth TelegramAuth?
  googleAuth   GoogleAuth?
  githubAuth   GithubAuth?

  // App relations
  items Item[]
}

// For username/password authentication
model EmailAuth {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  verified     Boolean   @default(false)
  verifyToken  String? // For email verification
  tokenExpiry  DateTime?

  // Recovery/reset related
  resetToken  String?
  resetExpiry DateTime?

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TelegramAuth {
  id         Int    @id @default(autoincrement())
  telegramId String @unique

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GoogleAuth {
  id       Int    @id @default(autoincrement())
  googleId String @unique

  // OAuth specific
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  expiresAt    Int?

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GithubAuth {
  id       Int    @id @default(autoincrement())
  githubId String @unique

  // OAuth specific
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  expiresAt    Int?

  // Relation
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  images      String[]
  userId      Int
  categoryId  Int
  validUntil  DateTime
  sold        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

enum Constraints {
  EMAIL_ENDS_WITH
  DOMAIN_RESTRICTION
  USERNAME_PATTERN
}

model UserRegistrationConstraint {
  constraint     Constraints
  field          String
  acceptedValues String[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@id([constraint, field])
}
